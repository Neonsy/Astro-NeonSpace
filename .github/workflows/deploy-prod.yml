name: Deploy Production
on:
    push:
        branches:
            - main

# Add concurrency control
concurrency:
    group: ${{ github.workflow }}-${{ github.ref }}
    cancel-in-progress: true

env:
    VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
    VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
    VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}

permissions:
  contents: write
  pull-requests: write

jobs:
    deploy:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Install pnpm
              uses: pnpm/action-setup@v4
              with:
                  version: 'latest'

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version-file: '/project/.node-version'
                  cache: 'pnpm'
                  cache-dependency-path: 'project/pnpm-lock.yaml'

            - name: Install Vercel CLI
              run: pnpm add -g vercel@latest

            - name: Pull Vercel Environment Information
              run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

            - name: Build Project Artifacts
              run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

            - name: Push Drizzle Migrations
              run: |
                pnpm db:migrate
                if [ $? -ne 0 ]; then
                  echo "::error::Database migration failed"
                  exit 1
                fi

            - name: Deploy Project Artifacts to Vercel
              run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}

            - name: Get PR number and apply label
              run: |
                  PR_NUMBER=$(gh api graphql -f query='
                    query($sha: String!) {
                      search(query: $sha, type: ISSUE, first: 1) {
                        nodes {
                          ... on PullRequest {
                            number
                          }
                        }
                      }
                    }' -f sha="${GITHUB_SHA}" --jq '.data.search.nodes[0].number')
                  if [ -n "${PR_NUMBER}" ]; then
                    gh api repos/${GITHUB_REPOSITORY}/issues/${PR_NUMBER}/labels \
                      -X POST \
                      -f labels[]="Deployed"
                  fi
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}